<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  namespace =  mapper对应接口的全限定符 -->
<mapper namespace="com.example.mapper.EmployeeMapper">
    <select id="queryById" resultType="com.example.pojo.Employee">
        select emp_id empId , emp_name empName , emp_salary empSalary
        from t_emp where emp_id = ${id}
    </select>
    <insert id="insertEmployee">
        insert into t_emp(emp_name,emp_salary) values(#{empName},#{empSalary})
    </insert>

    <!--zai配置中typeAliases标签声明批量将包下的类给与别名，别名就是类的首字母小写-->
    <select id="queryBySalary" resultType="Employee">
        select emp_id empId , emp_name empName , emp_salary empSalary
        from t_emp where emp_salary = #{ salary }
    </select>

    <!--
        场景3： 传入多个简单类型数据如何取值 key!
                可以不可以随便写？ 不可以！
                按照形参名称获取？ 也不可以！
                方案1： 注解指定  @Param注解  指定多个简单参数的key   key = @Param("value值")  [推荐]
                方案2： mybatis默认机制
                        argo arg1 .... 形参左到右依次对应 argo arg1..
                        (name,salary) name-> key = arg0  salary -> key = arg1
                        param1 param2 ....
                        (name,salary) name-> key = param1  salary -> key = param2
    -->
    <select id="queryByNameAndSalary" resultType="Employee">
        select emp_id empId , emp_name empName , emp_salary empSalary
        from t_emp where emp_name = #{param1} and emp_salary = #{param2}
    </select>
<!--    <select id="queryByNameAndSalary" resultType="com.example.pojo.Employee">-->
<!--        select emp_id empId , emp_name empName , emp_salary empSalary-->
<!--        from t_emp where emp_name = #{arg0} and emp_salary = #{arg1}-->
<!--    </select>-->

    <!-- 场景4： 传入map 如何指定key的值
                 key = map的key即可！
     -->
    <insert id="insertEmpMap">
        insert into t_emp (emp_name , emp_salary )  values (#{name},#{salary});
    </insert>


    <!--输出：
       场景1： 返回单个简单类型如何指定  resultType的写法！ 返回值的数据类型！！
               resultType语法：
                   1.类的全限定符号
                   2.别名简称
                      mybatis给我们提供了72种默认的别名！
                      这些都是我们常用的Java数据类型！  [java的常用数据类型]
                             基本数据类型 int  double  -> _int _double
                             包装数据类型 Integer Double  -> int integer double
                             集合容器类型 Map List  HashMap -> 小写即可 map list hashmap

                扩展：如果没有没有提供的需要自己定义或者写类的全限定符号
                   给自己声明的类如何定义别名：
                   mybatis-config.xml
                     给类单独定义别名！！！
                      <typeAliases>
                          <typeAlias type="com.example.pojo.Employee" alias="hahaha" />
                      </typeAliases>
                      批量设置：
                       <typeAliases>
                           批量将包下的类给与别名，别名就是类的首字母小写！
                           <package name="com.example.pojo"/>
                       </typeAliases>
                       扩展，如果不想使用批量的别名，可以使用注解给与名字！
                       @Alias("hahaha")
    -->

    <select id="queryNameById" resultType="string">
        select emp_name from t_emp where emp_id = #{id}
    </select>

    <select id="querySalaryById" resultType="_double">
        select emp_salary from t_emp where emp_id = #{id}
    </select>

    <!--
       场景2： 返回单个自定义类类型
        //返回单个自定义实体类型
        Employee queryById(Integer id);
        resultType : 返回值类型即可

        默认要求：
           查询，返回单个实体类型，要求列名和属性名要一致！
           这样才可以进行实体类的属性映射！

        但是可以进行设置，设置支持驼峰式自动映射！
           emp_id  -> empId ===  empId
        mybatis-config.xml
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    -->

    <select id="queryById1" resultType="employee" >
        select  *
        from t_emp where emp_id = ${id}
    </select>


    <!-- 场景3： 返回map
                 当没有实体类可以使用接值的时候！
                 我们可以使用map接受数据！
                 key - > 查询的列
                 value -> 查询的值
    -->
    <select id="selectEmpNameAndMaxSalary" resultType="map">
        SELECT
        emp_name 员工姓名,
        emp_salary 员工工资,
        (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资
        FROM t_emp WHERE emp_salary=(
        SELECT MAX(emp_salary) FROM t_emp
        )
    </select>

    <!--
       场景4： 返回的是集合类型如何指定
        //查询工资高于传入值的员工姓名们 200
        List<String> queryNamesBySalary(Double salary);

        //查询全部员工信息
        List<Employee> queryAll();
        Employee queryById();

        切记： 返回值是集合。resultType不需要指定集合类型，只需要指定泛型即可！！
        为什么？
            mybatis -> ibatis -> selectOne 单个  | selectList 集合 ->  selectOne中 调用 [ selectList ]
    -->
    <select id="queryNamesBySalary" resultType="string">
        select emp_name from t_emp where emp_salary > #{ salary }
    </select>

    <select id="queryAll" resultType="employee">
        select * from t_emp
    </select>


    <!--
       场景5: 主键回显 获取插入数据的主键
          1. 自增长主键回显 mysql  auto_increment
            //员工插入
            int insertEmp(Employee employee);
            useGeneratedKeys="true" 我们想要数据库自动增强的主键值
            keyColumn="emp_id" 主键列的值!!!
            keyProperty="empId" 接收主键列值的属性!!!
    -->
    <insert id="insertEmp" useGeneratedKeys="true" keyColumn="emp_id" keyProperty="empId">
        insert into t_emp (emp_name,emp_salary)
        value(#{empName},#{empSalary});
    </insert>

    <!--
       期望,非自增长的主键,交给mybatis帮助我们维护!
    -->
    <insert id="insertxxx">
        <!-- 插入之前,先指定一段sql语句,生成一个主键值!
             order="before|after" sql语句是在插入语句之前还是之后执行!
             resultType = 返回值类型
             keyProperty = 查询结果给哪个属性赋值

              //自己维护主键
                String id = UUID.randomUUID().toString().replaceAll("-", "")
                teacher.settId(id);
        -->
        <selectKey order="BEFORE" resultType="string" keyProperty="tId">
            SELECT  REPLACE(UUID(),'-','');
        </selectKey>

        INSERT INTO teacher (t_id,t_name)
        VALUE(#{tId},#{tName});
    </insert>

    <!--
        Teacher queryById(String tId);
        列名和属性不一致如何解决:
           方案1: 别名  select t_id tId , t_name tName from teacher where t_id = #{tId}
           方案2: 开启驼峰式映射  <setting name="mapUnderscoreToCamelCase" value="true"/>
                  t_id  tId 自动映射
           方案3: resultMap自定义映射  (resultType和resultMap二选一)
                 resultType按照规则自动映射  按照是否开启驼峰式映射,自己映射属性和列名! 只能映射一层结构!
                 深层次的对象结构无法映射,多表查询的时候结果无法映射!

                 Order                  -   数据库
                    orderId                        order_id
                    orderName                      order_name
                    OrderItem orderItem
                                 item_id           item_id

                resultMap标签,自定义映射关系,可以深层次可以单层次!!!
     -->

    <!-- 声明resultMap标签,自己定义映射规则
               id标识 -> select resultMap="标识"
               type   -> 具体的返回值类型 全限定符和别名 | 集合只写泛型即可
                   <id 主键映射关系
                   <result 普通列的映射关系
    -->
    <resultMap id="tMap" type="employee">
        <id column="emp_id" property="empId" />
        <result  column="emp_name" property="empName"/>
    </resultMap>

    <select id="queryById2"  resultMap="tMap">
        select * from teacher where t_id = #{tId}
    <!--select t_id tId , t_name tName from teacher where t_id = #{tId}-->
    </select>
</mapper>