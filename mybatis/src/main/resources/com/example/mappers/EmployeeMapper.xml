<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.mapper.EmployeeMapper">
    <!--    List<Employee> query(@Param("name") String name, @Param("salary") Double salary);
            如果传入属性,就判断相等,如果不传入,不加对应的条件
            where
            if 判断传入的参数,最终是否添加语句
                test属性 内部做比较运算,最终true将标签内的sql语句进行拼接
                                          false不拼接标签内部语句
                    判断语句: " key 比较符号 值 and | or key 比较符号 值"
                    大于和小于 不推荐直接写符号!  实体符号 html   >   == &gt;  < &lt;

            问题:
               假如两个都满足 where emp_name = #{name}  and emp_salary = #{salary}
               假如第一个满足 where  emp_name = #{name}
               假如第一个不满足,第二个满足 where and emp_salary = #{salary}   错误
               假如都不满足 where

            where标签的作用有两个:
                1. 自动添加where关键字  where内部有任何一个if满足,自动添加where关键字,不满足去掉where!
                2. 自动去掉多余的and 和 or 关键字-->
    <sql id="selectSql">
        select * from t_emp
    </sql>

    <select id="query" resultType="employee">
        <include refid="selectSql" />
        <where>
            <if test="name != null">emp_name = #{name}</if>
            <if test="salary != null and salary &gt; 100">and emp_salary = #{salary}</if>
        </where>
    </select>

    <select id="queryTrim" resultType="employee">
        <include refid="selectSql" />
        <trim prefix="where" suffixOverrides="and|or">
            <if test="name != null">emp_name = #{name} and</if>
            <if test="salary != null and salary &gt; 100">emp_salary = #{salary}</if>
        </trim>

    </select>
    <!--
    //根据员工id更新员工的数据，我们要求 传入的name和salary不为null的才更新
    int update(Employee employee);

    全部满足： 没问题
    第一个满足： 多个了一个 ,
    第二个满足： 没问题
    都不满足： 语法错误

    set: 1.自动去掉多余的 ,
         2.自动添加set关键字
-->
    <update id="update">
        update t_emp
        <set>
            <if test="empName != null"> emp_name = #{empName} ,</if>
            <if test="empSalary">emp_salary = #{empSalary}</if>
        </set>
        where emp_id = #{empId}
    </update>


    <!--    //根据两个条件查询，如果姓名不为null使用姓名查询，如果姓名为null,薪水不为空就使用薪水查询！ 都为null查询全部-->
    <!--    List<Employee> queryChoose(@Param("name") String name, @Param("salary") Double salary);-->
    <select id="queryChoose" resultType="employee">
        select * from t_emp
        where
        <choose>
            <when test="name != null">
                emp_name = #{name}
            </when>
            <when test="salary != null">
                emp_salary = #{salary}
            </when>
            <otherwise>1=1</otherwise>
        </choose>

    </select>
    <select id="queryList" resultType="com.example.pojo.Employee">
        select * from t_emp
    </select>

    <!-- 批量查询 -->
    <select id="queryBatch" resultType="com.example.pojo.Employee">
        SELECT * FROM employee WHERE empId IN
        <foreach item="id" index="index" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <!-- 批量删除 -->
    <delete id="deleteBatch">
        DELETE FROM employee WHERE empId IN
        <foreach item="id" index="index" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 批量插入 -->
    <insert id="insertBatch">
        INSERT INTO employee (empId, empName, empSalary)
        VALUES
        <foreach item="item" index="index" collection="list" separator=",">
            (#{item.empId}, #{item.empName}, #{item.empSalary})
        </foreach>
    </insert>

    <!-- 批量更新 -->
    <update id="updateBatch">
        <foreach item="item" index="index" collection="list" separator=";">
            UPDATE employee
            SET empName = #{item.empName},
            empSalary = #{item.empSalary}
            WHERE empId = #{item.empId}
        </foreach>
    </update>

</mapper>